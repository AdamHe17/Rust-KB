PDDL_doc = {soi ~ domain ~ eoi}

whitespace = _{ "\u{20}" | "\u{09}" | "\u{0A}" | "\u{0B}" | "\u{0C}" | "\u{0D}" }
comment = _{ ";" ~ (!("\u{0A}" | "\u{0D}") ~ any)* }

domain = { "(" ~ ^"define" ~ "(" ~ ^"domain" ~ name ~ ")" ~
            require_def? ~
            types_def? ~
            constants_def? ~
            predicates_def? ~
            functions_def? ~
            constraints? ~
            (structure_def ~ whitespace?)* ~ ")" }

require_def = {"(" ~ ^":requirements" ~ (require_key ~ whitespace?)+ ~ ")"}

require_key = {^":strips" | ^":typing" | ^":negative-preconditions" | ^":disjunctive-preconditions" | ^":equality" |
               ^":existential-preconditions" | ^":universal-preconditions" | ^":quantified-preconditions" |
               ^":conditional-effects" | ^":fluents" | ^":numeric-fluents" | ^":adl" | ^":durative-actions" |
               ^":duration-inequalities" | ^":continuous-effects" | ^":derived-predicates" | ^":timed-initial-literals" |
               ^":preferences" | ^":constraints" | ^":actions-conts"}

types_def = {"(" ~ ^":types" ~ typed_list_name ~ ")"}


constants_def = {"(" ~ ^":constants" ~ typed_list_name ~ ")"}

predicates_def = {"(" ~ ^":predicates"  ~ (atomic_formula_skeleton ~ whitespace?)+ ~ ")"}
atomic_formula_skeleton = { "(" ~ predicate ~ typed_list_variable ~ ")"}

predicate = @{name}
variable = @{"?"~name}



atomic_function_skeleton = {"(" ~ function_symbol ~ typed_list_variable ~ ")"}
function_symbol = @{name}
functions_def = { "(" ~ ^":functions" ~ function_typed_list_atomic_function_skeleton ~ ")" }
function_typed_list_atomic_function_skeleton =
    {(((atomic_function_skeleton ~ whitespace?)+ ~ "-" ~ function_type ~ whitespace?) |
     (atomic_function_skeleton ~ whitespace?))*}
function_type = { "number" | all_type }

constraints = {"(" ~ ^":constraints" ~ con_gd ~ ")"}


structure_def = { action_def | durative_action_def | derived_def }



typed_list_name = { (((name ~ whitespace?)+ ~ "-" ~ all_type ~ whitespace?) | (name ~ whitespace?))* }
typed_list_variable = { (((variable ~ whitespace?)+ ~ "-" ~ all_type ~ whitespace?) | (variable ~ whitespace?))* }

primitive_type = {name | "object"}
all_type = {("(" ~ ^"either" ~ (primitive_type ~ whitespace?)+ ~ ")") | primitive_type}

empty_or_pre_gd = {("("~")") | pre_gd}
empty_or_effect = {("("~")") | effect}
empty_or_da_gd = {("("~")") | da_gd}
empty_or_da_effect = {("("~")") | da_effect}


action_def = {"(" ~ ^":action" ~ action_symbol ~ ^":parameters" ~ "("  ~ typed_list_variable ~ ")" ~ action_def_body ~ ")"}

action_symbol = { name }

action_def_body = { (^":precondition" ~ empty_or_pre_gd)? ~ (^":effect" ~ empty_or_effect)? }


pre_gd = {pref_gd | ("(" ~ ^"and" ~ (pre_gd ~ whitespace?)* ~ ")") | ("(" ~ "forall" ~ "(" ~ typed_list_variable ~ ")" ~ pre_gd ~ ")")}

pref_gd = {("(" ~ ^"preference" ~ pref_name? ~ gd ~ ")") | gd }

pref_name = {name}


gd = { atomic_formula_term | literal_term | f_comp | ("(" ~ (
        (^"and" ~ (gd ~ whitespace?)*) |
        (^"or" ~ (gd ~ whitespace?)*) |
        (^"not" ~ gd) |
        (^"imply" ~ gd ~ gd) |
        (^"exists" ~ "(" ~ typed_list_variable ~ ")" ~ gd) |
        (^"forall" ~ "(" ~ typed_list_variable ~ ")" ~ gd)) ~ ")")}

f_comp = {"(" ~ binary_comp ~ f_exp ~ f_exp ~ ")"}

literal_term = { atomic_formula_term | ("(" ~ ^"not" ~ atomic_formula_term ~ ")")}
literal_name = { atomic_formula_name | ("(" ~ ^"not" ~ atomic_formula_name ~ ")")}

atomic_formula_term = { "(" ~ ((predicate ~ (term ~ whitespace?)*) | ("=" ~ term ~ term)) ~ ")"}
atomic_formula_name = { "(" ~ ((predicate ~ (name ~ whitespace?)*) | ("=" ~ name ~ name)) ~ ")"}

term = {name | variable | function_term}

function_term = {"(" ~ function_symbol ~ (term ~ whitespace?)* ~ ")"}





f_exp = {number | ("(" ~ (
                            (binary_op ~ f_exp ~ f_exp) |
                            (multi_op ~ f_exp ~ (f_exp ~ whitespace?)+) |
                            ( "-" ~ f_exp)) ~ ")") |
         f_head}

f_head = {function_symbol | ("(" ~ function_symbol ~ (term ~ whitespace?)* ~ ")")}


binary_op = {"/" | "-" | multi_op}
multi_op = {"*" | "+"}
binary_comp = {"<=" | ">=" | "=" | "<" | ">"}

name = @{letter ~ any_char*}
letter = {'a'..'z' | 'A'..'Z'}
any_char = {letter | digit | "-" | "_"}
number = @{digit+ ~ decimal?}
digit = {'0'..'9'}
decimal = @{"."~digit+}
integer = @{digit+}



effect = {("(" ~ ^"and" ~ (c_effect ~ whitespace?)* ~ ")") | c_effect}

c_effect = {("(" ~ ^"forall" ~ "(" ~ typed_list_variable ~ ")" ~ effect ~ ")") |
            ("(" ~ ^"when" ~ gd ~ cond_effect ~ ")") |
            p_effect}

p_effect = {("(" ~ ^"not" ~ atomic_formula_term ~ ")") | atomic_formula_term | ("(" ~ assign_op ~ f_head ~ f_exp ~ ")") |
            ("(" ~ ^"assign" ~ function_term ~ (term | ^"undefined") ~ ")")}

cond_effect = {("(" ~ ^"and" ~ (p_effect ~ whitespace?)* ~ ")") | p_effect}

assign_op = { ^"assign" | ^"scale-up" | ^"scale-down" | ^"increase" | ^"decrease" }

durative_action_def = {"(" ~ ^":durative-action" ~ da_symbol ~ ^":parameters" ~ "(" ~ typed_list_variable ~ ")" ~ da_def_body ~ ")"}

da_symbol = {name}

da_def_body = {^":duration" ~ duration_constraint ~ ^":condition" ~ empty_or_da_gd ~ ^":effect" ~ empty_or_da_effect}

da_gd = {pref_timed_gd | ("(" ~ ^"and" ~ (da_gd ~ whitespace?)* ~ ")") | ("(" ~ ^"forall" ~ "(" ~ typed_list_variable ~ ")" ~ da_gd ~ ")")}

pref_timed_gd = {timed_gd | ("(" ~ ^"preference" ~ pref_name? ~ timed_gd ~ ")")}

timed_gd = {"(" ~ ((^"at" ~ time_specifier) | (^"over" ~ interval)) ~ gd ~ ")"}
time_specifier = {^"start" | ^"end"}
interval = {^"all"}


duration_constraint = {("(" ~ ")") | simple_duration_constraint | ("(" ~ ^"and" ~ (simple_duration_constraint ~ whitespace?)+ ~ ")")}

simple_duration_constraint = {("(" ~ d_op ~ "?duration" ~ d_value ~ ")") | ("(" ~ ^"at" ~ time_specifier ~ simple_duration_constraint ~ ")")}

d_op = {"<=" | ">=" | "="}

d_value = {number | f_exp}

da_effect = {("(" ~ ^"and" ~ (da_effect ~ whitespace?)* ~ ")") | timed_effect | ("(" ~ ^"forall" ~ "(" ~ typed_list_variable ~ ")" ~ da_effect ~ ")") |
             ("(" ~ ^"when" ~ da_gd ~ timed_effect ~ ")")}

timed_effect = {("(" ~ ^"at" ~ time_specifier ~ (cond_effect | f_assign_da) ~ ")") | ("(" ~ assign_op_t ~ f_head ~ f_exp_t ~ ")")}

f_assign_da = {"(" ~ assign_op ~ f_head ~ f_exp_da ~ ")"}

f_exp_da = {("(" ~ binary_op ~ f_exp_da ~ f_exp_da ~ ")") | ("(" ~ multi_op ~ f_exp_da ~ (f_exp_da ~ whitespace?)+ ~ ")") |
            ("(" ~ "-" ~ f_exp_da ~ ")") | (^"?duration") | f_exp }

assign_op_t = {^"increase" | ^"decrease"}

f_exp_t = {("(" ~ "*" ~ ((f_exp ~ ^"#t") | (^"#t" ~ f_exp)) ~ ")") | ^"#t" }

derived_def = {"(" ~ ^":derived" ~ atomic_formula_skeleton ~ gd ~ ")"}











problem = {"(" ~ ^"define" ~ "(" ~ ^"problem" ~ name ~ ")" ~ "(" ~ ^":domain" ~ name ~ ")" ~
           require_def? ~
           object_declaration? ~
           init ~
           goal ~
           p_constraints? ~
           metric_spec? ~
           length_spec? ~ ")"}

object_declaration = {"(" ~ ^":objects" ~ typed_list_name ~ ")"}
init = {"(" ~ ^":init" ~ (init_el ~ whitespace?)* ~ ")"}
init_el = {literal_name | ("(" ~ "at" ~ number ~ literal_name ~ ")") | ("(" ~ "=" ~ basic_function_term ~ (number | name) ~ ")")}

basic_function_term = {function_symbol | ("(" ~ function_symbol ~ (name ~ whitespace?)* ~ ")")}

goal = {"(" ~ ^":goal" ~ pre_gd ~ ")"}
p_constraints = {"(" ~ ^":constraints" ~ pref_con_gd ~ ")"}

pref_con_gd = {("(" ~ ^"and" ~ (pref_con_gd ~ whitespace?)* ~ ")") |
               ("(" ~ ^"forall" ~ "(" ~ typed_list_variable ~ ")" ~ pref_con_gd ~ ")") |
               ("(" ~ ^"preference" ~ pref_name? ~ con_gd ~ ")") |
               con_gd }

con_gd = {"(" ~ ( ("and" ~ (con_gd ~ whitespace?)*) |
                  ("forall" ~ typed_list_variable ~ con_gd) |
                  ("at"~"end" ~ gd) |
                  ("always" ~ con2_gd) |
                  ("sometime" ~ con2_gd) |
                  ("within" ~ number ~ gd) |
                  ("at-most-once" ~ con2_gd) |
                  ("sometime-after" ~ con2_gd ~ con2_gd) |
                  ("sometime-before" ~ con2_gd ~ con2_gd) |
                  ("always-within" ~ number ~ con2_gd ~ con2_gd) |
                  ("hold-during" ~ number ~ number ~ con2_gd) |
                  ("hold-after" ~ number ~ con2_gd) )
          ~ ")"}

con2_gd = { con_gd | gd }


metric_spec = {"(" ~ ^":metric" ~ optimization ~ metric_f_exp ~ ")"}
optimization = {"minimize" | "maximize"}
metric_f_exp = {number | function_symbol | ^"total-time" | ("(" ~ (
                    (binary_op ~ metric_f_exp ~ metric_f_exp) |
                    (multi_op ~ metric_f_exp ~ (metric_f_exp ~ whitespace?)+) |
                    ("-" ~ metric_f_exp) |
                    (function_symbol ~ (name ~ whitespace?)*) |
                    (^"is-violated" ~ pref_name))
                ~ ")") }

length_spec = {"(" ~ ^":length" ~ ("(" ~ ^":serial" ~ integer ~ ")")? ~ ("(" ~ ^":parallel" ~ integer ~ ")")?}
